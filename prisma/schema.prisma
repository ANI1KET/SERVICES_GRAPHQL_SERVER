// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  OWNER
  BROKER
}

enum Permission {
  room
  hostel
  vehicle
  property
  reMarketItem
}

model Subscription {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  permissions Json     @default("{}")
  // RELATIONSHIP
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // TIMESTAMPS
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@map("Subscriptions")
}

// âœ… Explicit Many-to-Many Relation Model
model InterestedRoomsUsers {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // RELATIONSHIP
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String          @db.ObjectId
  // RELATIONSHIP
  interestedRoom   InterestedRooms @relation(fields: [interestedRoomId], references: [id], onDelete: Cascade)
  interestedRoomId String          @db.ObjectId
  // TIMESTAMPS
  createdAt        DateTime        @default(now())

  @@unique([userId, interestedRoomId])
  @@index([userId])
  @@index([interestedRoomId])
}

model InterestedRooms {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  listerId String @db.ObjectId

  // RELATIONSHIP
  roomId       String                 @unique @db.ObjectId
  room         Room                   @relation(fields: [roomId], references: [id], name: "RoomInterested", onDelete: Cascade)
  // RELATIONSHIP: Many-to-Many with User (explicit relation)
  interestedBy InterestedRoomsUsers[]

  @@index([listerId])
}

model User {
  id              String                 @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String                 @unique
  image           String?
  number          String?
  password        String?
  // ENUM
  role            Role                   @default(USER)
  permission      Permission[]           @default([])
  // RELATIONSHIP
  subscription    Subscription?
  // RELATIONSHIP
  rooms           Room[]                 @relation("UserRooms")
  roomReviews     RoomReview[]           @relation("UserRoomReviews")
  // RELATIONSHIP
  hostels         Hostel[]               @relation("UserHostels")
  hostelReviews   HostelReview[]         @relation("UserHostelReviews")
  // RELATIONSHIP
  porperties      Property[]             @relation("UserPorperties")
  // RELATIONSHIP
  vehicles        Vehicle[]              @relation("UserVehicles")
  // RELATIONSHIP
  reMarketItems   ReMarketItem[]         @relation("UserReMarketItems")
  // RELATIONSHIP: Many-to-Many with InterestedRooms (explicit relation)
  interestedRooms InterestedRoomsUsers[]
  // TIMESTAMPS
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  @@index([role])
  @@index([permission])
  @@index([role, permission])
  @@map("Users")
}

enum FurnishingStatusEnum {
  FURNISHED
  UNFURNISHED
  SEMIFURNISHED
}

model Room {
  id               String               @id @default(auto()) @map("_id") @db.ObjectId
  mincapacity      Int
  maxcapacity      Int
  price            Float
  name             String
  ownerContact     String
  primaryContact   String
  city             String
  location         String
  direction        String?
  videos           String?
  photos           String[]
  ratings          Float                @default(0)
  available        Boolean              @default(true)
  postedBy         Role                 @default(USER)
  verified         Boolean              @default(false)
  bedroom          Int
  hall             Int
  kitchen          Int
  bathroom         Int
  roomtype         String
  amenities        String[]             @default([])
  isActive         Boolean              @default(true)
  // ENUM
  furnishingStatus FurnishingStatusEnum
  // RELATIONSHIP
  reviews          RoomReview[]         @relation("RoomReviews")
  // RELATIONSHIP
  lister           User                 @relation(fields: [listerId], references: [id], name: "UserRooms", onDelete: Cascade)
  listerId         String               @db.ObjectId
  // RELATIONSHIP
  interestedRoom   InterestedRooms?     @relation(name: "RoomInterested")
  // 
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  @@index([city])
  @@index([listerId])
  @@index([isActive])
  @@map("Rooms")
}

model RoomReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Float
  comment   String
  // RELATIONSHIP 
  user      User     @relation(fields: [userId], references: [id], name: "UserRoomReviews", onDelete: Cascade)
  userId    String   @db.ObjectId
  // RELATIONSHIP 
  room      Room     @relation(fields: [roomId], references: [id], name: "RoomReviews", onDelete: Cascade)
  roomId    String   @db.ObjectId
  // 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  // @@index([roomId])
  @@map("Room_Reviews")
}

model Hostel {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  city           String
  location       String
  totalRooms     Int?
  availableRooms Int?
  price          Float?
  direction      String?
  contact        String?
  amenities      String[]
  roomTypes      String[]
  images         String[]
  isActive       Boolean        @default(true)
  // RELATIONSHIP
  reviews        HostelReview[] @relation("HostelReviews")
  // RELATIONSHIP
  lister         User           @relation(fields: [listerId], references: [id], name: "UserHostels", onDelete: Cascade)
  listerId       String         @db.ObjectId
  // 
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("Hostels")
}

model HostelReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Float
  comment   String
  // RELATIONSHIP
  user      User     @relation(fields: [userId], references: [id], name: "UserHostelReviews", onDelete: Cascade)
  userId    String   @db.ObjectId
  // RELATIONSHIP 
  hostel    Hostel   @relation(fields: [hostelId], references: [id], name: "HostelReviews", onDelete: Cascade)
  hostelId  String   @db.ObjectId
  // 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  // @@index([roomId])
  @@map("Hostel_Reviews")
}

model Property {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  city         String
  location     String
  direction    String?
  size         Float? // Size in square meters or feet
  price        Float
  propertyType String // Apartment, House, Land, etc.
  bedrooms     Int?
  bathrooms    Int?
  furnished    Boolean?
  images       String[]
  isActive     Boolean  @default(true)
  // RELATIONSHIP 
  seller       User     @relation(fields: [sellerId], references: [id], name: "UserPorperties", onDelete: Cascade)
  sellerId     String   @db.ObjectId
  // 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("Properties")
}

enum Transmission {
  Manual
  Automatic
}

model Vehicle {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  model           String
  numberPlate     String       @unique
  color           String?
  year            Int?
  mileage         Float?
  fuelType        String?
  seatingCapacity Int?
  price           Float?
  images          String[]
  condition       String?
  isActive        Boolean      @default(true)
  // ENUM
  transmission    Transmission
  // RELATIONSHIP 
  seller          User         @relation(fields: [sellerId], references: [id], name: "UserVehicles", onDelete: Cascade)
  sellerId        String       @db.ObjectId
  // TIMESTAMPS
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("Vehicles")
}

model ReMarketItem {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  city        String
  location    String
  description String?
  price       Float
  condition   String // Like New, Sale, Refurbished, UsedItem, etc.
  category    String // Electronics, Furniture, Clothing, etc.
  images      String[]
  purchasedAt DateTime?
  isActive    Boolean   @default(true)
  // RELATIONSHIP 
  seller      User      @relation(fields: [sellerId], references: [id], name: "UserReMarketItems", onDelete: Cascade)
  sellerId    String    @db.ObjectId
  // TIMESTAMPS
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("ReMarketItems")
}
